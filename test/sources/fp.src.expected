( 0 <main> ref:expr 0-21 | ( 0 rule:expr choice 0-21 | < Rule `funcCall` didn't match :: ch:0 ref:funcCall @0 | < Sequence failed at entry 1 :: rule:funcCall seqnc @3 | ( 0 seq:0 ref:varExpr 0-3 | ( 0 rule:varExpr ref:ident 0-3 | ( 0 rule:ident seqnc 0-3 | ( 0 seq:0 ref:alpha 0-1 | ( 0 rule:alpha choice 0-1 | ( 0 ch:0 char-range 0-1 ) ) ) : ( 0 seq:1 repsep 1-3 | ( 0 rep choice 1-2 | ( 0 ch:0 ref:alphaNum 1-2 | ( 0 rule:alphaNum choice 1-2 | ( 0 ch:0 ref:alpha 1-2 | ( 0 rule:alpha choice 1-2 | ( 0 ch:0 char-range 1-2 ) ) ) ) ) ) : ( 0 sep text 2-2 ) : ( 0 rep choice 2-3 | ( 0 ch:0 ref:alphaNum 2-3 | ( 0 rule:alphaNum choice 2-3 | ( 0 ch:0 ref:alpha 2-3 | ( 0 rule:alpha choice 2-3 | ( 0 ch:0 char-range 2-3 ) ) ) ) ) ) : ( 0 sep text 3-3 ) : < None of choices matched input :: rep choice @3 | < Rule `alphaNum` didn't match :: ch:0 ref:alphaNum @3 | < None of choices matched input :: rule:alphaNum choice @3 | < Rule `alpha` didn't match :: ch:0 ref:alpha @3 | < None of choices matched input :: rule:alpha choice @3 | < Expected character in range from 'a' to 'z', but found ' ' :: ch:0 char-range @3 > : < Expected character in range from 'A' to 'Z', but found ' ' :: ch:1 char-range @3 > : < Expected '_', but found ' ' :: ch:2 text @3 > > > : < Rule `num` didn't match :: ch:1 ref:num @3 | < Expected character in range from '0' to '9', but found ' ' :: rule:num char-range @3 > > > > : < Expected '.', but found ' ' :: ch:1 text @3 > > ) ) ) ) : < Expected '(', but found ' ' :: seq:1 text @3 > > > : < Rule `lambda` didn't match :: ch:1 ref:lambda @0 | < Sequence failed at entry 0 :: rule:lambda seqnc @0 | < Expected '(', but found 'l' :: seq:0 text @0 > > > : ( 0 ch:2 ref:letExpr 0-21 | ( 0 rule:letExpr seqnc 0-21 | ( 0 seq:0 ref:letKW 0-3 | ( 0 rule:letKW text 0-3 ) ) : ( 0 seq:1 ref:ws 3-4 | ( 0 rule:ws repsep 3-4 | ( 0 rep choice 3-4 | ( 0 ch:0 text 3-4 ) ) : ( 0 sep text 4-4 ) : < None of choices matched input :: rep choice @4 | < Expected ' ', but found 'x' :: ch:0 text @4 > : < Expected '
', but found 'x' :: ch:1 text @4 > > ) ) : ( 0 seq:2 ref:ident 4-5 | ( 0 rule:ident seqnc 4-5 | ( 0 seq:0 ref:alpha 4-5 | ( 0 rule:alpha choice 4-5 | ( 0 ch:0 char-range 4-5 ) ) ) : ( 0 seq:1 repsep 5-5 | < None of choices matched input :: rep choice @5 | < Rule `alphaNum` didn't match :: ch:0 ref:alphaNum @5 | < None of choices matched input :: rule:alphaNum choice @5 | < Rule `alpha` didn't match :: ch:0 ref:alpha @5 | < None of choices matched input :: rule:alpha choice @5 | < Expected character in range from 'a' to 'z', but found ' ' :: ch:0 char-range @5 > : < Expected character in range from 'A' to 'Z', but found ' ' :: ch:1 char-range @5 > : < Expected '_', but found ' ' :: ch:2 text @5 > > > : < Rule `num` didn't match :: ch:1 ref:num @5 | < Expected character in range from '0' to '9', but found ' ' :: rule:num char-range @5 > > > > : < Expected '.', but found ' ' :: ch:1 text @5 > > ) ) ) : ( 0 seq:3 ref:ws 5-6 | ( 0 rule:ws repsep 5-6 | ( 0 rep choice 5-6 | ( 0 ch:0 text 5-6 ) ) : ( 0 sep text 6-6 ) : < None of choices matched input :: rep choice @6 | < Expected ' ', but found '=' :: ch:0 text @6 > : < Expected '
', but found '=' :: ch:1 text @6 > > ) ) : ( 0 seq:4 text 6-7 ) : ( 0 seq:5 ref:ws 7-8 | ( 0 rule:ws repsep 7-8 | ( 0 rep choice 7-8 | ( 0 ch:0 text 7-8 ) ) : ( 0 sep text 8-8 ) : < None of choices matched input :: rep choice @8 | < Expected ' ', but found '2' :: ch:0 text @8 > : < Expected '
', but found '2' :: ch:1 text @8 > > ) ) : ( 0 seq:6 ref:expr 8-9 | ( 0 rule:expr choice 8-9 | < Rule `funcCall` didn't match :: ch:0 ref:funcCall @8 | < Sequence failed at entry 0 :: rule:funcCall seqnc @8 | < Rule `varExpr` didn't match :: seq:0 ref:varExpr @8 | < Rule `ident` didn't match :: rule:varExpr ref:ident @8 | < Sequence failed at entry 0 :: rule:ident seqnc @8 | < Rule `alpha` didn't match :: seq:0 ref:alpha @8 | < None of choices matched input :: rule:alpha choice @8 | < Expected character in range from 'a' to 'z', but found '2' :: ch:0 char-range @8 > : < Expected character in range from 'A' to 'Z', but found '2' :: ch:1 char-range @8 > : < Expected '_', but found '2' :: ch:2 text @8 > > > > > > > > : < Rule `lambda` didn't match :: ch:1 ref:lambda @8 | < Sequence failed at entry 0 :: rule:lambda seqnc @8 | < Expected '(', but found '2' :: seq:0 text @8 > > > : < Rule `letExpr` didn't match :: ch:2 ref:letExpr @8 | < Sequence failed at entry 0 :: rule:letExpr seqnc @8 | < Rule `letKW` didn't match :: seq:0 ref:letKW @8 | < Expected 'let', but found '2 i' :: rule:letKW text @8 > > > > : < Rule `varExpr` didn't match :: ch:3 ref:varExpr @8 | < Rule `ident` didn't match :: rule:varExpr ref:ident @8 | < Sequence failed at entry 0 :: rule:ident seqnc @8 | < Rule `alpha` didn't match :: seq:0 ref:alpha @8 | < None of choices matched input :: rule:alpha choice @8 | < Expected character in range from 'a' to 'z', but found '2' :: ch:0 char-range @8 > : < Expected character in range from 'A' to 'Z', but found '2' :: ch:1 char-range @8 > : < Expected '_', but found '2' :: ch:2 text @8 > > > > > > : < Rule `stringLit` didn't match :: ch:4 ref:stringLit @8 | < Sequence failed at entry 0 :: rule:stringLit seqnc @8 | < Expected '"', but found '2' :: seq:0 text @8 > > > : ( 0 ch:5 ref:intLit 8-9 | ( 0 rule:intLit seqnc 8-9 | ( 0 seq:0 ref:num 8-9 | ( 0 rule:num char-range 8-9 ) ) : ( 0 seq:1 repsep 9-9 | < Rule `num` didn't match :: rep ref:num @9 | < Expected character in range from '0' to '9', but found ' ' :: rule:num char-range @9 > > ) ) ) ) ) : ( 0 seq:7 ref:ws 9-10 | ( 0 rule:ws repsep 9-10 | ( 0 rep choice 9-10 | ( 0 ch:0 text 9-10 ) ) : ( 0 sep text 10-10 ) : < None of choices matched input :: rep choice @10 | < Expected ' ', but found 'i' :: ch:0 text @10 > : < Expected '
', but found 'i' :: ch:1 text @10 > > ) ) : ( 0 seq:8 ref:inKW 10-12 | ( 0 rule:inKW text 10-12 ) ) : ( 0 seq:9 ref:ws 12-13 | ( 0 rule:ws repsep 12-13 | ( 0 rep choice 12-13 | ( 0 ch:0 text 12-13 ) ) : ( 0 sep text 13-13 ) : < None of choices matched input :: rep choice @13 | < Expected ' ', but found 'p' :: ch:0 text @13 > : < Expected '
', but found 'p' :: ch:1 text @13 > > ) ) : ( 0 seq:10 ref:expr 13-21 | ( 0 rule:expr choice 13-21 | ( 0 ch:0 ref:funcCall 13-21 | ( 0 rule:funcCall seqnc 13-21 | ( 0 seq:0 ref:varExpr 13-18 | ( 0 rule:varExpr ref:ident 13-18 | ( 0 rule:ident seqnc 13-18 | ( 0 seq:0 ref:alpha 13-14 | ( 0 rule:alpha choice 13-14 | ( 0 ch:0 char-range 13-14 ) ) ) : ( 0 seq:1 repsep 14-18 | ( 0 rep choice 14-15 | ( 0 ch:0 ref:alphaNum 14-15 | ( 0 rule:alphaNum choice 14-15 | ( 0 ch:0 ref:alpha 14-15 | ( 0 rule:alpha choice 14-15 | ( 0 ch:0 char-range 14-15 ) ) ) ) ) ) : ( 0 sep text 15-15 ) : ( 0 rep choice 15-16 | ( 0 ch:0 ref:alphaNum 15-16 | ( 0 rule:alphaNum choice 15-16 | ( 0 ch:0 ref:alpha 15-16 | ( 0 rule:alpha choice 15-16 | ( 0 ch:0 char-range 15-16 ) ) ) ) ) ) : ( 0 sep text 16-16 ) : ( 0 rep choice 16-17 | ( 0 ch:0 ref:alphaNum 16-17 | ( 0 rule:alphaNum choice 16-17 | ( 0 ch:0 ref:alpha 16-17 | ( 0 rule:alpha choice 16-17 | ( 0 ch:0 char-range 16-17 ) ) ) ) ) ) : ( 0 sep text 17-17 ) : ( 0 rep choice 17-18 | ( 0 ch:0 ref:alphaNum 17-18 | ( 0 rule:alphaNum choice 17-18 | < Rule `alpha` didn't match :: ch:0 ref:alpha @17 | < None of choices matched input :: rule:alpha choice @17 | < Expected character in range from 'a' to 'z', but found '2' :: ch:0 char-range @17 > : < Expected character in range from 'A' to 'Z', but found '2' :: ch:1 char-range @17 > : < Expected '_', but found '2' :: ch:2 text @17 > > > : ( 0 ch:1 ref:num 17-18 | ( 0 rule:num char-range 17-18 ) ) ) ) ) : ( 0 sep text 18-18 ) : < None of choices matched input :: rep choice @18 | < Rule `alphaNum` didn't match :: ch:0 ref:alphaNum @18 | < None of choices matched input :: rule:alphaNum choice @18 | < Rule `alpha` didn't match :: ch:0 ref:alpha @18 | < None of choices matched input :: rule:alpha choice @18 | < Expected character in range from 'a' to 'z', but found '(' :: ch:0 char-range @18 > : < Expected character in range from 'A' to 'Z', but found '(' :: ch:1 char-range @18 > : < Expected '_', but found '(' :: ch:2 text @18 > > > : < Rule `num` didn't match :: ch:1 ref:num @18 | < Expected character in range from '0' to '9', but found '(' :: rule:num char-range @18 > > > > : < Expected '.', but found '(' :: ch:1 text @18 > > ) ) ) ) : ( 0 seq:1 text 18-19 ) : ( 0 seq:2 ref:expr 19-20 | ( 0 rule:expr choice 19-20 | < Rule `funcCall` didn't match :: ch:0 ref:funcCall @19 | < Sequence failed at entry 1 :: rule:funcCall seqnc @20 | ( 0 seq:0 ref:varExpr 19-20 | ( 0 rule:varExpr ref:ident 19-20 | ( 0 rule:ident seqnc 19-20 | ( 0 seq:0 ref:alpha 19-20 | ( 0 rule:alpha choice 19-20 | ( 0 ch:0 char-range 19-20 ) ) ) : ( 0 seq:1 repsep 20-20 | < None of choices matched input :: rep choice @20 | < Rule `alphaNum` didn't match :: ch:0 ref:alphaNum @20 | < None of choices matched input :: rule:alphaNum choice @20 | < Rule `alpha` didn't match :: ch:0 ref:alpha @20 | < None of choices matched input :: rule:alpha choice @20 | < Expected character in range from 'a' to 'z', but found ')' :: ch:0 char-range @20 > : < Expected character in range from 'A' to 'Z', but found ')' :: ch:1 char-range @20 > : < Expected '_', but found ')' :: ch:2 text @20 > > > : < Rule `num` didn't match :: ch:1 ref:num @20 | < Expected character in range from '0' to '9', but found ')' :: rule:num char-range @20 > > > > : < Expected '.', but found ')' :: ch:1 text @20 > > ) ) ) ) : < Expected '(', but found ')' :: seq:1 text @20 > > > : < Rule `lambda` didn't match :: ch:1 ref:lambda @19 | < Sequence failed at entry 0 :: rule:lambda seqnc @19 | < Expected '(', but found 'x' :: seq:0 text @19 > > > : < Rule `letExpr` didn't match :: ch:2 ref:letExpr @19 | < Sequence failed at entry 0 :: rule:letExpr seqnc @19 | < Rule `letKW` didn't match :: seq:0 ref:letKW @19 | < Expected 'let', but found 'x)' :: rule:letKW text @19 > > > > : ( 0 ch:3 ref:varExpr 19-20 | ( 0 rule:varExpr ref:ident 19-20 | ( 0 rule:ident seqnc 19-20 | ( 0 seq:0 ref:alpha 19-20 | ( 0 rule:alpha choice 19-20 | ( 0 ch:0 char-range 19-20 ) ) ) : ( 0 seq:1 repsep 20-20 | < None of choices matched input :: rep choice @20 | < Rule `alphaNum` didn't match :: ch:0 ref:alphaNum @20 | < None of choices matched input :: rule:alphaNum choice @20 | < Rule `alpha` didn't match :: ch:0 ref:alpha @20 | < None of choices matched input :: rule:alpha choice @20 | < Expected character in range from 'a' to 'z', but found ')' :: ch:0 char-range @20 > : < Expected character in range from 'A' to 'Z', but found ')' :: ch:1 char-range @20 > : < Expected '_', but found ')' :: ch:2 text @20 > > > : < Rule `num` didn't match :: ch:1 ref:num @20 | < Expected character in range from '0' to '9', but found ')' :: rule:num char-range @20 > > > > : < Expected '.', but found ')' :: ch:1 text @20 > > ) ) ) ) ) ) : ( 0 seq:3 text 20-21 ) ) ) ) ) ) ) ) )