main :- repSep(declaration,ws).
alpha :- ([a-z]|[A-Z]|"_").
alphaNum :- (alpha|num).
clause :- (record|comparison).
commaSpace :- [",",ws].
commaWS :- [",",ws].
comparison :- [left:term,ws,comparisonOp,ws,right:term].
comparisonOp :- ("<="|">="|">"|"<"|"="|"!=").
conjuncts :- repSep(clause,[ws,"&",ws]).
constraint :- [ruleKW,ws,record,ws,"{",ws,conjuncts,ws,sepKW,ws,constraintComparison,ws,"}"].
constraintComparison :- [left:scalarExpr,ws,comparisonOp,ws,right:scalarExpr].
declaration :- (varRelationDecl|inputRelationDecl|paramDecl|objective|constraint).
ident :- [alpha,repSep((alphaNum|"."),"")].
inputKW :- "input".
inputRelationDecl :- [inputKW,ws,ident,ws,schemaSpec].
int :- [("-"|""),first:num,repSep(num,"")].
num :- [0-9].
objective :- [senseKW,ws,"{",ws,conjuncts,ws,sepKW,ws,scalarExpr,ws,"}"].
paramDecl :- [paramKW,ws,ident,ws,"{",ws,repSep(paramLimit,commaSpace),ws,"}"].
paramKW :- "param".
paramLimit :- [("min"|"max"|"init"),":",ws,int].
placeholder :- "???".
record :- [ident,"{",ws,recordAttrs,ws,"}"].
recordAttrs :- repSep((recordKeyValue|placeholder),commaSpace).
recordKeyValue :- [ident,":",ws,term].
ruleKW :- "rule".
scalarExpr :- repSep(scalarTerm,[ws,"+",ws]).
scalarTerm :- [([coefficient:term,ws,"*",ws]|""),term:term].
schemaSpec :- ["{",ws,repSep(ident,[",",ws]),ws,"}"].
senseKW :- ("minimize"|"maximize").
sepKW :- "=>".
string :- ["\"",repSep(stringChar,""),"\""].
stringChar :- (^'"'|['\\','"']).
term :- (record|int|var|string|placeholder).
var :- [[A-Z],repSep(([A-Z]|alphaNum),"")].
varKW :- "var".
varRelationDecl :- [varKW,ws,ident,ws,schemaSpec].
ws :- repSep((" "|"\n"),"").