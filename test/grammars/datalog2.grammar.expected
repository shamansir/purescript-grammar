main :- [ws,repSep(declaration,ws),ws].
aggregation :- [aggregation:ident,"[",repSep(var,commaSpace),":",ws,record,"]"].
alpha :- ([a-z]|[A-Z]|"_").
alphaNum :- (alpha|num).
arithmetic :- (assignmentOnLeft|assignmentOnRight).
arithmeticOp :- ("+"|"*"|"-").
array :- ["[",ws,repSep(term,commaSpace),ws,"]"].
assignmentOnLeft :- [result:term,ws,"=",ws,left:term,ws,arithmeticOp,ws,right:term].
assignmentOnRight :- [left:term,ws,arithmeticOp,ws,right:term,ws,"=",ws,result:term].
bool :- ("true"|"false").
commaSpace :- [",",ws].
comment :- ["#",repSep(commentChar,"")].
commentChar :- ^'\n'.
comparison :- [left:term,ws,comparisonOp,ws,right:term].
comparisonOp :- ("<="|">="|">"|"<"|"="|"!=").
conjunct :- (nested|record|comparison|arithmetic|negation|aggregation|placeholder).
declaration :- (rule|tableDecl|import|fact).
defKW :- "def".
deleteFact :- ["-",record,"."].
dict :- ["{",ws,repSep(dictKeyValue,commaSpace),ws,"}"].
dictKeyValue :- [key:string,":",ws,value:term].
disjunct :- repSep(conjunct,[ws,"&",ws]).
fact :- [record,"."].
ident :- [alpha,repSep(alphaNum,"")].
import :- [importKW,ws,path].
importKW :- "import".
inRef :- [inRefKW,"(",table:qualifier,":",col:ident,")"].
inRefKW :- "inRef".
int :- [("-"|""),first:num,repSep(num,"")].
negation :- ["!",record].
nested :- [qualifier,ws,"{",ws,repSep(nestedAttr,commaSpace),ws,"}"].
nestedAttr :- (normalAttr|nested).
normalAttr :- [ident,":",ws,term].
num :- [0-9].
outRef :- [outRefKW,"(",table:qualifier,":",col:ident,")"].
outRefKW :- "outRef".
path :- ["\"",repSep(pathSegment,"/"),"\""].
pathSegment :- repSep(([a-z]|[A-Z]|[0-9]|'_'|'-'|'.'),"").
placeholder :- "???".
qualifier :- repSep(ident,".").
query :- [record,"?"].
record :- [qualifier,"{",ws,recordAttrs,ws,"}"].
recordAttrs :- repSep((recordKeyValue|placeholder),commaSpace).
recordKeyValue :- [ident,":",ws,term].
refSpec :- [":",ws,(outRef|inRef)].
rule :- [defKW,ws,record,ws,"{",ws,repSep(disjunct,[ws,"|",ws]),ws,"}"].
spaces :- repSep(" ","").
string :- ["\"",repSep(stringChar,""),"\""].
stringChar :- (^'"'|['\\','"']).
tableAttr :- [ident,(refSpec|"")].
tableDecl :- [tableKW,ws,name:qualifier,ws,"{",ws,repSep(tableAttr,commaSpace),ws,"}"].
tableKW :- "table".
term :- (record|int|var|string|bool|array|dict|placeholder).
var :- [[A-Z],repSep(([A-Z]|alphaNum),"")].
ws :- repSep([spaces,(comment|"")],"\n").