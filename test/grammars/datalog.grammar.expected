main :- [ws,repSep(statement,ws),ws].
aggregation :- [aggregation:ident,"[",repSep(var,commaSpace),":",ws,record,"]"].
alpha :- ([a-z]|[A-Z]|"_").
alphaNum :- (alpha|num).
arithmetic :- (assignmentOnLeft|assignmentOnRight).
arithmeticOp :- ("+"|"*"|"-").
array :- ["[",ws,repSep(term,commaSpace),ws,"]"].
assignmentOnLeft :- [result:term,ws,"=",ws,left:term,ws,arithmeticOp,ws,right:term].
assignmentOnRight :- [left:term,ws,arithmeticOp,ws,right:term,ws,"=",ws,result:term].
bool :- ("true"|"false").
commaSpace :- [",",ws].
comment :- ["#",repSep(commentChar,"")].
commentChar :- ^'\n'.
comparison :- [left:term,ws,comparisonOp,ws,right:term].
comparisonOp :- ("<="|">="|">"|"<"|"="|"!=").
conjunct :- (record|comparison|arithmetic|negation|aggregation|placeholder).
deleteFact :- ["-",record,"."].
dict :- ["{",ws,repSep(dictKeyValue,commaSpace),ws,"}"].
dictKeyValue :- [key:string,":",ws,value:term].
disjunct :- repSep(conjunct,[ws,"&",ws]).
fact :- [record,"."].
ident :- [alpha,repSep((alphaNum|"."),"")].
int :- [("-"|""),first:num,repSep(num,"")].
loadKW :- ".load".
loadStmt :- [loadKW,ws,path].
negation :- ["!",record].
num :- [0-9].
path :- repSep(pathSegment,"/").
pathSegment :- repSep(([a-z]|[A-Z]|[0-9]|'_'|'-'|'.'),"").
placeholder :- "???".
query :- [record,"?"].
record :- [ident,"{",ws,recordAttrs,ws,"}"].
recordAttrs :- repSep((recordKeyValue|placeholder),commaSpace).
recordKeyValue :- [ident,":",ws,term].
rule :- [record,ws,":-",ws,repSep(disjunct,[ws,"|",ws]),"."].
spaces :- repSep(" ","").
statement :- (rule|fact|query|deleteFact|tableDecl|loadStmt).
string :- ["\"",repSep(stringChar,""),"\""].
stringChar :- (^'"'|['\\','"']).
tableDecl :- [tableKW,ws,name:ident].
tableKW :- ".table".
term :- (record|int|var|string|bool|array|dict|placeholder).
var :- [[A-Z],repSep(([A-Z]|alphaNum),"")].
ws :- repSep([spaces,(comment|"")],"\n").